import streamlit as st
import torch
import torch.nn as nn
import torchvision.transforms as transforms
from torchvision import models
from PIL import Image
import zipfile, os, io
import pandas as pd
from io import StringIO

st.set_page_config(page_title="Diagnostic Phytosanitaire IA", layout="wide")

# ==========================
# CONFIGURATION DU MOD√àLE
# ==========================
MODEL_PATH = "Models/best_student_mobilenetv3_model_6.pth"
FICHES_DIR = "Fiches"
IMG_SIZE = 224

# Classes connues (√† adapter selon ton dataset)
class_names = sorted([f.replace(".txt", "") for f in os.listdir(FICHES_DIR) if f.endswith(".txt")])

# Charger le mod√®le
@st.cache_resource
def load_model():
    model = models.mobilenet_v3_small(weights=None)  # architecture
    num_ftrs = model.classifier[3].in_features
    model.classifier[3] = nn.Linear(num_ftrs, len(class_names))
    model.load_state_dict(torch.load(MODEL_PATH, map_location=torch.device("cpu")))
    model.eval()
    return model

model = load_model()

# Transformations pour pr√©diction
transform = transforms.Compose([
    transforms.Resize((IMG_SIZE, IMG_SIZE)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                         std=[0.229, 0.224, 0.225])
])

# ==========================
# FONCTIONS UTILES
# ==========================
def predict(image):
    """Retourne la classe pr√©dite et la confiance."""
    img_tensor = transform(image).unsqueeze(0)
    with torch.no_grad():
        outputs = model(img_tensor)
        probs = torch.softmax(outputs, dim=1)
        conf, pred = torch.max(probs, 1)
    return class_names[pred.item()], conf.item()

def load_fiche(classe):
    """Charge la fiche texte associ√©e √† une classe."""
    fiche_path = os.path.join(FICHES_DIR, f"{classe}.txt")
    if os.path.exists(fiche_path):
        with open(fiche_path, "r", encoding="utf-8") as f:
            return f.read()
    return "Aucune fiche disponible."

def handle_upload(uploaded_file):
    """Retourne une liste de tuples (image PIL, nom du fichier)."""
    images = []
    if uploaded_file.type in ["image/jpeg", "image/png"]:
        image = Image.open(uploaded_file).convert("RGB")
        images.append((image, uploaded_file.name))
    elif uploaded_file.type in ["application/x-zip-compressed", "application/zip"]:
        with zipfile.ZipFile(uploaded_file, "r") as zip_ref:
            for file in zip_ref.namelist():
                if file.lower().endswith((".jpg", ".jpeg", ".png", ".bmp")):
                    img_data = zip_ref.read(file)
                    image = Image.open(io.BytesIO(img_data)).convert("RGB")
                    images.append((image, os.path.basename(file)))
    return images

# ==========================
# INTERFACE STREAMLIT
# ==========================

menu = st.sidebar.radio("Navigation", ["üìñ Informations", "üîé Tester le prototype"])

# -------------------------
# PAGE 1 : Informations
# -------------------------
if menu == "üìñ Informations":
    st.title("üìñ Projet : Diagnostic phytosanitaire sur mobile")
    st.subheader("Auteur : Marie-Ange DIENG")
    
    st.markdown("""
    ### üéØ Probl√®me √† r√©soudre
    Les maladies des plantes repr√©sentent une menace majeure pour la s√©curit√© alimentaire.  
    Ce projet vise √† fournir une solution **IA accessible** pour aider les agriculteurs √† diagnostiquer rapidement et efficacement les maladies √† partir d‚Äôimages de plantes.

    ### üß† M√©thodologie
    - Utilisation du **Transfer Learning**  
    - Comparaison de plusieurs architectures l√©g√®res (MobileNetV2, EfficientNetB0, etc.)  
    - S√©lection du mod√®le le plus adapt√© pour mobile et web.

    ### ü§ñ Mod√®le retenu
    - **Teacher-Student avec ResNet50/MobileNetV3-Small**  
    - **Pr√©cision** : 100%  
    - **Taille** : ~6 Mo (id√©al pour mobile)  
    - **Avantages** : rapide, l√©ger, fiable.  

    ### üì± R√©sultat attendu
    - D√©ploiement d‚Äôun prototype accessible via une **web app Streamlit**.  
    - L‚Äôutilisateur charge une image, l‚ÄôIA donne le diagnostic instantan√©ment accompagn√© d‚Äôune fiche explicative.  
    """)

# -------------------------
# PAGE 2 : Prototype
# -------------------------
elif menu == "üîé Tester le prototype":
    st.title("üîé Tester le prototype de diagnostic")
    st.write("Suivez les √©tapes ci-dessous :")

    # √âtape 1 : Upload
    st.subheader("1Ô∏è‚É£ Charger une image ou un fichier ZIP")
    uploaded_file = st.file_uploader("S√©lectionnez une image (.jpg/.png) ou un fichier .zip contenant plusieurs images", type=["jpg", "jpeg", "png", "zip"])

    if uploaded_file:
        images = handle_upload(uploaded_file)
        if not images:
            st.error("‚ö†Ô∏è Aucun fichier image valide trouv√©.")
        else:
            st.success(f"{len(images)} image(s) charg√©e(s).")

            # √âtape 2 : Pr√©diction
            st.subheader("2Ô∏è‚É£ Pr√©diction...")

            results = []
            for idx, (img, filename) in enumerate(images, 1):
                pred_class, conf = predict(img)
                fiche = load_fiche(pred_class)

                st.markdown(f"### üñºÔ∏è Image {idx}")
                st.image(img, caption=f"Image {idx}", use_container_width=True)

                st.markdown(f"""
                - ‚úÖ Classe pr√©dite : **{pred_class}**  
                - üî¢ Confiance : **{conf*100:.2f}%**
                """)

                with st.expander(f"üìÑ Fiche d'information - {pred_class}"):
                    st.write(fiche)

                results.append((idx, filename, pred_class, conf))

            # √âtape 3 : R√©sum√©
            st.subheader("3Ô∏è‚É£ R√©sum√© des pr√©dictions")
            df_results = pd.DataFrame(results, columns=["Image #", "Nom du fichier","Classe pr√©dite", "Confiance"])
            st.table(df_results)

            # Conversion en CSV (en m√©moire)
            csv_buffer = StringIO()
            df_results.to_csv(csv_buffer, index=False)

            # Bouton de t√©l√©chargement
            st.download_button(
                label="üì• T√©l√©charger les pr√©dictions en CSV",
                data=csv_buffer.getvalue(),
                file_name="predictions.csv",
                mime="text/csv"
            )